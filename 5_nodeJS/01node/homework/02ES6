let命令用法:
1.let用来声明变量，但声明的变量只能在let命令所在的代码块内有效
2.let命令声明的变量不存在"变量提升"现象，它所声明的变量一定要在声明后使用，否则报错。
3.let的声明存在"暂时性死区"，即只要块级作用域内存在let命令，它所声明的变量就绑定这个区域，不再受外部的影响。
4.let不允许在相同作用域内，重复声明同一个变量。

const命令用法:
1.const声明一个只读的常量。一旦声明，常量的值就不能改变。这也意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。
2.const的作用域与let命令相同：只在声明所在的块级作用域内有效。
3.const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。
4.const声明的常量，也与let一样不可重复声明。

变量的解构赋值:
1.ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。
2.let [a, b, c] = [1, 2, 3] 这样写表示，可以从数组中提取值，按照对应位置，对变量赋值。本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。
3.如果解构不成功，对应变量的值就等于undefined。
4.解构赋值允许指定默认值。ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。
5.解构赋值还可以用于对象与字符串。

箭头函数
1.ES6 允许使用“箭头”（=>）定义函数。例如: var f = v => v;  相当于var f = function(v) {  return v; };
2.如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。例如: var f = () => 5;  var sum = (num1, num2) => num1 + num2;
3.由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。例如: let getTempItem = id => ({ id: id, name: "Temp" });
4.如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号。例如:  let fn = () => void doesNotReturn();
箭头函数有几个使用注意点:
（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。